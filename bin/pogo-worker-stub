#!/usr/bin/env perl

use 5.008;
use warnings;
use strict;

use Fcntl;
use File::Temp qw(tempfile);
use Sys::Hostname qw(hostname);
use constant LOCKFILE     => '/tmp/pogo_worker.lock';
use constant POST_HOOKDIR => '/etc/pogo/post.d/';
use constant PRE_HOOKDIR  => '/etc/pogo/pre.d/';
use constant TEMPDIR      => '/tmp';
use Safe;

$SIG{HUP} = $SIG{INT} = $SIG{TERM} = $SIG{__DIE__} = \&cleanup;

my $hostname = hostname();
my $locked   = 0;
my $lockfh   = undef;
my $opts     = undef;
my $tempfile = undef;
my ( $stubdir, $stubname ) = $0 =~ m/(.*)(\/.*\/.*)$/;

sub cleanup
{
  my $msg = shift;
  if ( $msg =~ m/^[A-Z]+$/ ) { $msg = 'got SIG' . $msg; }
  if ( $tempfile && -e $tempfile )
  {
    unlink $tempfile;
  }
  if ($locked)
  {
    print "pogo-worker: unlocking\n";
    close $lockfh;
    unlink LOCKFILE;
  }
  unlink $stubname;
  print "Removed the stub $stubname \n";

  die "ERROR: pogo-worker died: $msg";
}

sub run_hooks
{
  my $dir = shift;
  if ( !-r $dir || !-d $dir ) { return 0; }
  opendir( my $dh, $dir ) or die "hook failed, can't open $dir: $!";
  my @files = map { $dir . $_ } sort grep { !/^\./ && -x $dir . $_ } readdir($dh);
  closedir($dh);
  foreach my $run (@files)
  {
    print "pogo-worker: running hook '$run'\n";
    my $ret = system($run) >> 8;
    if ( $ret != 0 ) { die "hook '$run' exited $ret, bailing out"; }
  }
}

sub main
{
  print "\n";
  my $compartment = Safe->new();
  $opts = $compartment->reval(<DATA>);
  die "safe eval failed: $@" if $@;
  die "bad options"
    unless $opts->{job}
      && $opts->{command}
      && exists $opts->{retry}
      && exists $opts->{timeout};
  if ( $opts->{signature_fields} )
  {
    #die if the signature is not present
    die "Required data for verifying signatures not present"
      unless ( $opts->{signature}
      && $opts->{target_keyring}
      && ( ref( $opts->{target_keyring} ) eq 'ARRAY' ) );

    my %keyring_dir_hash = map { $_ => 0 } @{ $opts->{target_keyring} };

    #get all the signature fields
    my @fields = @{ $opts->{signature_fields} };

    #convert it into a hash for easier checking if required fields are present
    my %fields_hash = map { $_ => 1 } @fields;

    #list of required fields in the signature to make sure the signature is not faked
    my @required_fields = qw(run_as command);

    # If pre and post hooks are sent across, make sure they are in the signature
    # Since these are commands and we dont want any arbitrary unsigned commands
    # to be executed
    push @required_fields, qw(prehook)  if $opts->{prehook};
    push @required_fields, qw(posthook) if $opts->{posthook};

    #verify presence of all required fields
    foreach my $required_field (@required_fields)
    {
      die "A required field needed in the signature is missing: $required_field"
        unless exists $fields_hash{$required_field};

    }

    #serialize the data to validate the signature
    my $serialization;
    foreach my $field (@fields)
    {
      die "A required field needed for signature verification is missing: $field"
        unless exists $opts->{$field};
      if ( ( $field eq 'signature_fields' ) || ( $field eq 'target' ) )
      {
        $serialization .= $field . 0x01 . join( ';', @{ $opts->{$field} } );
      }
      else
      {
        $serialization .= $field . 0x01 . $opts->{$field};
      }
    }

    #store data in a temp file
    my $data_file = File::Temp->new( DIR => TEMPDIR(), UNLINK => 1 );
    chmod( 0600, $data_file->filename );
    $data_file->print($serialization);
    close $data_file;

    foreach my $sig_hash ( @{ ( $opts->{signature} ) } )
    {
      die "Required fields for signature are not present"
        unless ( defined $sig_hash->{sig} && defined $sig_hash->{name} );
      #store the signature in another temp file
      my $signature_file = File::Temp->new( DIR => TEMPDIR(), UNLINK => 1 );
      chmod( 0600, $signature_file->filename );
      $signature_file->print( $sig_hash->{sig} );
      close $signature_file;

      my $result = -1;
      #verify the signature with the data
      foreach my $keyring ( @{ $opts->{target_keyring} } )
      {
        my $keyring_str = '';
        $keyring_str = '--keyring ' . $keyring . " --no-default-keyring";
        my $execute_string = 'gpg '
          . $keyring_str
          . ' --verify '
          . $signature_file->filename . ' '
          . $data_file->filename;
        $result = system($execute_string) >> 8;
        die "Verifying signature failed: $@ for user $sig_hash->{name} "
          if ($@);

        #The signature is not verifiable against the current keyring
        if ( $result != 0 )
        {
          #check against next keyring
          next;
        }
        #signature succeeded, no need to verify this signature against any more keyrings
        else
        {
          #Mark which keyring it succeeded against.
          $keyring_dir_hash{$keyring} = 1;
          last;

        }

      }

      #The signature is not present in any of the supplied keyrings
      if ( $result != 0 )
      {
        unlink $signature_file;
        unlink $data_file;
        die "Exit code: $result, User $sig_hash->{name} not in any keyrings "
          . "or Signature invalid or Data invalid\n";
      }
      unlink $signature_file;
    }

    #Check the keyring hash that each keyring has atleast one user siging the data
    while ( my ( $key, $value ) = each(%keyring_dir_hash) )
    {
      die "No user from keyring $key signed the data"
        if ( !$value );
    }

    unlink $data_file;

  }
  print "pogo-worker: loaded; retry=$opts->{retry}, timeout=$opts->{timeout}\n";
  print "pogo-worker: command='$opts->{command}'\n";
  if ( !sysopen( $lockfh, LOCKFILE, O_CREAT | O_EXCL | O_WRONLY ) )
  {
    my $cmd = 'cat ' . LOCKFILE;
    chomp( my $otherpid = qx($cmd) );
    if ( $otherpid && -d "/proc/$otherpid" )
    {
      &cleanup("another pogo-worker is running (pid $otherpid), bailing out");
    }
    print "pogo-worker: cleaning up stale lockfile\n";
    unlink LOCKFILE;
    if ( !sysopen( $lockfh, LOCKFILE, O_CREAT | O_EXCL | O_WRONLY ) )
    {
      &cleanup("can't obtain lockfile, bailing out");
    }
  }
  $locked = 1;
  select $lockfh;
  $| = 1;
  print "$$\n";
  select STDOUT;
  if ( exists $opts->{exe_name} )
  {
    my ( $h, $f ) = tempfile( sprintf( 'pogo_%s_XXXX', $opts->{exe_name} ), DIR => TEMPDIR() );
    {
      local $/;
      print $h <DATA>;
    }
    close($h);
    chmod 0700, $tempfile = $opts->{command} = $f;
  }
  run_hooks(PRE_HOOKDIR) if ( $opts->{prehook} );
  print "pogo-worker: running command '$opts->{command}'\n";
  my $count = 0;
  my $ret   = -1;
  while ( $ret != 0 && $count <= $opts->{retry} )
  {
    eval {
      $SIG{ALRM} = sub { die "command timed out"; };
      alarm $opts->{timeout};
      $ret = system( $opts->{command} ) >> 8;
      alarm 0;
    };
    if ($@) { die "command timed out"; }
    last if $ret == 0;
    print "WARNING: pogo-worker: command exited $ret";
    $count ? print ", retry $count of $opts->{retry}\n" : print "\n";
    $count++;
    sleep 5;
  }
  if ( $ret != 0 ) { die "command exited $ret"; }
  print "pogo-worker: command exit $ret\n";
  run_hooks(POST_HOOKDIR) if $opts->{posthook};
  if ( $tempfile && -e $tempfile )
  {
    unlink $tempfile;
  }
  unlink LOCKFILE;
  unlink $stubname;
  print "Removed the stub $stubname \n";
  print "\n";
  return $ret;
}
exit &main;
__DATA__
